Help on module rapi:

NAME
    rapi

FUNCTIONS
    beckmannToBlinnPhong(...)
        returns blinn-phong specular exponent from beckmann roughness. (f)
    
    blinnPhongToBeckmann(...)
        returns beckmann roughness from blinn-phong specular exponent. (f)
    
    callExtensionMethod(...)
        calls an extension method. (s|)
    
    checkFileExists(...)
        returns non-0 if file exists. (u)
    
    checkFileExt(...)
        non-0 if filename contains extension. (uu)
    
    compressDeflate(...)
        returns compressed bytearray. (O|i)
    
    compressHuffmanCanonical(...)
        returns compressed bytearray. (O)
    
    compressSegaChanSA(...)
        returns compressed bytearray. (O)
    
    createBoneMap(...)
        returns a list of mapped bone indices and remaps the provided weights. (O)
    
    createPCMWaveHeader(...)
        returns a bytearray of pcm wave header data. (iiii)
    
    createProceduralAnim(...)
        generates a procedural animation. (OOi)
    
    createTriStrip(...)
        returns a list of triangle strip indices. (O|i)
    
    dataToFloatList(...)
        returns a list of floats interpreted from raw data. (Oiii|i)
    
    dataToIntList(...)
        returns a list of ints interpreted from raw data. (Oiii)
    
    decodeADPCMBlock(...)
        decodes an adpcm block. (OiiiiOOO|iid)
    
    decodeNormals32(...)
        returns a bytearray of decoded floating point normals. (Oiiiii)
    
    decodePSPVert(...)
        returns a NoePSPVertInfo (I)
    
    decodeTangents32(...)
        returns a bytearray of decoded floating point tangents. (Oiiiii)
    
    decodeXboxADPCMBlock(...)
        decodes an xbox adpcm block. (Oi)
    
    decompBlast(...)
        returns decompressed bytearray. (Oi)
    
    decompFPK(...)
        returns decompressed bytearray. (Oi)
    
    decompHuffmanCanonical(...)
        returns decompressed bytearray. (Oi)
    
    decompInflate(...)
        returns decompressed bytearray. (Oi|i)
    
    decompLZ4(...)
        returns decompressed bytearray. (Oi)
    
    decompLZHMelt(...)
        returns decompressed bytearray. (Oi)
    
    decompLZJag(...)
        returns decompressed bytearray. (Oi|iii)
    
    decompLZMA(...)
        returns decompressed bytearray. (OiO)
    
    decompLZNT1(...)
        returns decompressed bytearray. (Oi)
    
    decompLZO(...)
        returns decompressed bytearray. (Oi)
    
    decompLZO2(...)
        returns decompressed bytearray. (Oi)
    
    decompLZS01(...)
        returns decompressed bytearray. (Oi)
    
    decompPRS(...)
        returns decompressed bytearray. (Oi)
    
    decompPuff(...)
        returns decompressed bytearray. (Oi)
    
    decompRNC(...)
        returns decompressed bytearray. (Oi)
    
    decompSegaChanSA(...)
        returns decompressed bytearray. (Oi)
    
    decompXMemLZX(...)
        returns decompressed bytearray. (Oi|iii)
    
    decompressEdgeIndices(...)
        returns a bytearray of decompressed little-endian short indices. (Oi|i)
    
    decryptAES(...)
        returns decrypted bytearray. (OO|O)
    
    deferToOtherHandler(...)
        see comments around Noesis_DeferToOtherHandler in pluginshare.h. (sO)
    
    elfLoaderFree(...)
        frees the elf loader and associated resources. (O)
    
    elfLoaderInit(...)
        returns a handle to the elf loader. (KI)
    
    elfLoaderLoadData(...)
        loads an ELF file from the provided data. (OO|I)
    
    elfLoaderLoadPath(...)
        loads an ELF file on the provided path. (Ou|I)
    
    elfLoaderReadMemory(...)
        returns data read from elf loader memory. (OKK)
    
    elfLoaderResetLoadedSectionSize(...)
        resets loader's loaded section size. (only affects loading when ignoring section load addresses) (O)
    
    elfLoaderSectionCount(...)
        returns the number of sections for the most recently loaded ELF. (O)
    
    elfLoaderSectionInfo(...)
        returns a tuple of (name, virtual address, file offset, loaded address, size). (OI)
    
    elfLoaderSymbolCount(...)
        returns the number of symbols loaded across ELF files. (O)
    
    elfLoaderSymbolInfo(...)
        returns a tuple of (name, address, size, packinfo). (OI)
    
    encryptAES(...)
        returns encrypted bytearray. (OO|O)
    
    exportArchiveFile(...)
        exports an archive file. (sO)
    
    exportArchiveFileCheck(...)
        returns non-0 if calling exportArchiveFile on this path would overwrite. (s)
    
    exportArchiveFileGetName(...)
        returns absolute path for archive export file, creating directories as needed. (s)
    
    forcePreviewAnimUI(...)
        forces the animation UI to appear in the active preview.
    
    getDeferredAnims(...)
        returns a list of NoeAnim objects. (or an empty list, if no deferred data is available)
    
    getDirForFilePath(...)
        returns directory string for filename. (u)
    
    getExtensionlessName(...)
        returns extensionless filename string. (u)
    
    getFlatWeights(...)
        returns byte array of flattened weights. (in the form of int bone indices for each vert, float weights for each vert) (Oi)
    
    getInflatedSize(...)
        walks through deflate stream to return final decompressed size. (O|i)
    
    getInputName(...)
        returns source filename.
    
    getInternalViewData(...)
        returns a buffer of internal view data, or None on failure. see pluginshare.h for more info.
    
    getLZHMeltSize(...)
        walks through lzh stream to return final decompressed size. (O)
    
    getLZJagSize(...)
        walks through lzjag stream to return final decompressed size. (O|iii)
    
    getLZNT1Size(...)
        walks through lzh stream to return final decompressed size. (O)
    
    getLastCheckedName(...)
        returns last checked/parsed filename.
    
    getLocalFileName(...)
        returns local filename string. (u)
    
    getOutputName(...)
        returns destination filename.
    
    getPRSSize(...)
        walks through prs stream to return final decompressed size. (O)
    
    getSegaChanSASize(...)
        walks through sa stream to return final decompressed size. (O)
    
    imageApplyPalette(...)
        returns an indexed/8bpp image in a bytearray. (OiiOi)
    
    imageArrangeTiles(...)
        returns image with tiles arranged using the provided LUT. (OiiiiO)
    
    imageBlit32(...)
        image blit between 2 32-bit images. (OiiiiOiiii|ii)
    
    imageBlockLinearGOBBlockHeight(...)
        returns block height given image height and log2 of max block height. (ii)
    
    imageBlockLinearGOBMaxBlockHeight(...)
        returns log2 of mip0's max block height for default layout under Some Drivers. (i|i)
    
    imageCalculateAMDRDNAMipInfo(...)
        returns tuple of (mip offset, width in elements, height in elements, block width, block height, bytes per element). (iiiiii)
    
    imageChopTiles8x8(...)
        returns tuple of bytes, (int32 tile references, unique 8x8 tiles). (Oiii)
    
    imageCopyChannelRGBA32(...)
        returns rgba32 image with channel copied. (Oii)
    
    imageDXTRemoveFlatFractionBlocks(...)
        performs processing to turn dxt fraction-only blocks into direct color reference blocks for shitty hardware. (Oi)
    
    imageDecodeASTC(...)
        returns rgba32 image from decoded astc. (Oiiiiii)
    
    imageDecodeDXT(...)
        returns rgba32 image from decoded dxt. (Oiii)
    
    imageDecodeETC(...)
        returns rgba32 image from decoded etc. (Oiis)
    
    imageDecodePICA200ETC1(...)
        returns rgba decoded from specialized PICA200 ETC1, may be in ETC1-A4 form. (Oiii|i)
    
    imageDecodePVRTC(...)
        returns rgba32 image from decoded pvrtc. (Oiii)
    
    imageDecodeRaw(...)
        returns rgba32 image from decoded raw pixels. (Oiis|i)
    
    imageDecodeRawPal(...)
        returns rgba32 image from decoded raw pixels+palette. (OOiiis|i)
    
    imageDrawText8x8(...)
        draws text into rgba32 with 8x8 font. (OiiiiiOs)
    
    imageEncodeASTC(...)
        returns encoded astc from rgba image. (Oiiiiiii)
    
    imageEncodeDXT(...)
        returns encoded dxt from rgba image. (Oiiii)
    
    imageEncodeETC(...)
        returns encoded etc from rgba image. (Oiiii|i)
    
    imageEncodeRaw(...)
        returns encoded image from rgba32. (Oiis)
    
    imageExpandU8Normals(...)
        returns expanded, normalized vectors as f32 packed in bytearray. (Oiii)
    
    imageFlipRGBA32(...)
        returns flipped rgba32 data. (Oiiii)
    
    imageFromMortonOrder(...)
        returns linear image data. (Oii|ii)
    
    imageGameBoyDrawTile(...)
        draws tile to rgba32 canvas. (OiiiiiiOOi)
    
    imageGaussianBlur(...)
        returns gaussian-blurred rgba32 data from rgba32 source. (Oiif)
    
    imageGenVDPDecodeChar(...)
        returns bytearray of decoded linear 8bpp image(s). (O)
    
    imageGenVDPDrawTile(...)
        draws tile to rgba32 canvas. (OiiiiHOOi|ii)
    
    imageGenVDPEncodeChar(...)
        returns bytearray of encoded 4bpp image(s). (O)
    
    imageGenVDPExpandPalette(...)
        returns colors expanded to rgba32. (Oi)
    
    imageGetDDSFromDXT(...)
        returns a dds file in a bytearray, from dxt data and supplied parameters. (Oiiii)
    
    imageGetPalette(...)
        returns a rgba/32bpp X-entry palette in a bytearray. (Oiiiii)
    
    imageGetTGAFromRGBA32(...)
        returns a tga file in a bytearray, from rgba32 data and supplied parameters. (Oii)
    
    imageGetTexRGBA(...)
        gets rgba32 pixel data for a texture object. (O)
    
    imageGetTexRGBAFloat(...)
        gets rgba32 float data (normally 0..1, but may be signed or exceed this range for hdr data) for a texture object. (O|ii)
    
    imageInterpolatedSample(...)
        returns a rgba tuple (in 0.0-1.0 range) of the interpolated sample from a rgba32 image (Oiiff)
    
    imageJaguarCRYToRGBA(...)
        returns bytearray of rgba32 data. (Oi)
    
    imageJaguarClosestWidth(...)
        returns closest addressable width to the provided width, encoded. (i)
    
    imageJaguarDecodeBPEG(...)
        returns decoded NoeTexture. (Oi)
    
    imageJaguarDecodeWidth(...)
        returns decoded 6-bit width. (i)
    
    imageJaguarGetBPEGSize(...)
        returns size of BPEG data, including header. (Oi)
    
    imageJaguarRGBAToCRY(...)
        returns bytearray of cry data. (Oi)
    
    imageK052109DrawTile(...)
        draws tile to rgba32 canvas. (OiiiiHOOiii)
    
    imageKernelProcess(...)
        returns a processed image, processed by invoking a provided kernel method which operates on a bytearray containing data for the active pixel. (OiiiO|O)
    
    imageMedianCut(...)
        returns a median-cut rgba/32bpp image in a bytearray. (Oiiiii)
    
    imageN64DecodeRGBA32(...)
        returns decoded rgba32 image. (OOiiiii)
    
    imageN64ReadTMEM(...)
        simulate read from tmem. (Oiii)
    
    imageN64WriteTMEM(...)
        simulate write to tmem. (Oiii)
    
    imageNESDrawTile(...)
        draws tile to rgba32 canvas. (OiiiiiOOi)
    
    imageNESEncodeChar32(...)
        encodes NES char from rgba32. (OOi)
    
    imageNormalMapFromHeightMap(...)
        returns normal map rgba32 data from rgba32 source. (Oiiffi)
    
    imageNormalSwizzle(...)
        returns rgba32 image with various pixel processing. also auto-normalizes pixels. (Oiiiii)
    
    imageOpaqueAlphaRGBA32(...)
        returns true if alpha is opaque. (O)
    
    imagePS2WriteAndReadback32(...)
        returns untwiddled (ps2 hardware) texture data. (Oiiiii)
    
    imagePSXDecodeVideoFrame(...)
        returns MDEC data for every macroblock in the frame. (Oiiii)
    
    imagePSXMDEC(...)
        processes MDEC blocks and returns rgba32 canvas. (OOOOii)
    
    imagePackU8Normals(...)
        returns bytearray of packed normal vectors. (Oiii)
    
    imagePrefilterRoughness(...)
        returns filtered roughness image, same size/channels as source. (OiiifOiiii)
    
    imageResample(...)
        returns a resampled (user-specified filtering, default bilinear) rgba/32bpp image in a bytearray. (Oiiii)
    
    imageResampleBicubic(...)
        returns a resampled rgba/32bpp image in a bytearray. (Oiiii|f)
    
    imageResampleBox(...)
        returns a resampled rgba/32bpp image in a bytearray. (Oiiii)
    
    imageResampleNearest(...)
        returns a resampled rgba/32bpp image in a bytearray. (Oiiii|i)
    
    imageSNESDecodeCharMode1B0(...)
        returns bytearray of decoded linear 8bpp image(s). (O)
    
    imageSNESDecodeCharMode4B0(...)
        returns bytearray of decoded linear 8bpp image(s). (O)
    
    imageSNESEncodeCharMode1B0(...)
        returns bytearray of encoded 4bpp image(s). (O)
    
    imageSNESEncodeCharMode4B0(...)
        returns bytearray of encoded 8bpp image(s). (O)
    
    imageSNESExpandPalette(...)
        returns colors expanded to rgba32. (Oi)
    
    imageSNESMode1B0DrawTile(...)
        draws tile to rgba32 canvas. (OiiiiHOOi)
    
    imageSNESMode4B0DrawTile(...)
        draws tile to rgba32 canvas. (OiiiiHOOi)
    
    imageScaleRGBA32(...)
        returns scaled rgba32 data. (OOii|i)
    
    imageShiftUpTo8(...)
        returns image with each channel shifted up to 8 bits. (Oiiii)
    
    imageSwapChannelRGBA32(...)
        returns rgba32 image with channels swapped. (Oii)
    
    imageTile1dThin(...)
        returns untiled data. (Oiiii)
    
    imageTileAMDR600(...)
        returns tuple of tiled data, pitch, slice size. see pluginshare.h for more information. (Oiiiiiiii)
    
    imageTileAMDRDNA(...)
        returns tiled data. see pluginshare.h for more information. (Oiiiiii)
    
    imageTileBlockLinearGOB(...)
        returns untiled data. (Oiii|i)
    
    imageTileInto32(...)
        tiles image into another. (OiiOiiii)
    
    imageTilePICA200ETC(...)
        returns tiled ETC data. (Oiii|i)
    
    imageTilePICA200Raw(...)
        returns tiled raw data. (Oiii|i)
    
    imageToGamma(...)
        returns rgba32 converted from linear to gamma space. (Oii)
    
    imageToLinear(...)
        returns rgba32 converted from gamma to linear space. (Oii)
    
    imageToMortonOrder(...)
        returns morton ordered image data. (Oii|ii)
    
    imageTransformTangentSpaceNormals(...)
        returns model space vectors as f32 packed in bytearray. (OiiO)
    
    imageTwiddlePS2(...)
        returns twiddled (ps2 hardware) texture data. (Oiii)
    
    imageTwiddlePSP(...)
        returns twiddled (psp hardware) texture data. (Oiii)
    
    imageUntile1dThin(...)
        returns untiled data. (Oiiii)
    
    imageUntile360DXT(...)
        returns untiled dxt pixel data. (Oiii)
    
    imageUntile360Raw(...)
        returns untiled raw pixel data. (Oiii)
    
    imageUntileAMDR600(...)
        returns tuple of untiled data, pitch, slice size. see pluginshare.h for more information. (Oiiiiiiii)
    
    imageUntileAMDRDNA(...)
        returns untiled data. see pluginshare.h for more information. (Oiiiiii)
    
    imageUntileBlockLinearGOB(...)
        returns untiled data. (Oiii|i)
    
    imageUntilePICA200ETC(...)
        returns untiled ETC data. (Oiii|i)
    
    imageUntilePICA200Raw(...)
        returns untiled raw data. (Oiii|i)
    
    imageUntwiddlePS2(...)
        returns untwiddled (ps2 hardware) texture data. (Oiii)
    
    imageUntwiddlePSP(...)
        returns untwiddled (psp hardware) texture data. (Oiii)
    
    imageWritePNGBuffer(...)
        returns png in memory buffer. (Oii)
    
    immBegin(...)
        begin immediate-mode drawing. (i)
    
    immBoneIndex(...)
        feeds a vertex bone index. (O)
    
    immBoneIndexX(...)
        feeds a vertex bone index. (Oii)
    
    immBoneIndexb(...)
        feeds a vertex bone index. (Oi)
    
    immBoneIndexi(...)
        feeds a vertex bone index. (Oi)
    
    immBoneIndexs(...)
        feeds a vertex bone index. (Oi)
    
    immBoneIndexub(...)
        feeds a vertex bone index. (Oi)
    
    immBoneIndexui(...)
        feeds a vertex bone index. (Oi)
    
    immBoneIndexus(...)
        feeds a vertex bone index. (Oi)
    
    immBoneWeight(...)
        feeds a vertex bone weight. (O)
    
    immBoneWeightX(...)
        feeds a vertex bone weight. (Oii)
    
    immBoneWeightf(...)
        feeds a vertex bone weight. (Oi)
    
    immBoneWeighthf(...)
        feeds a vertex bone weight. (Oi)
    
    immBoneWeightub(...)
        feeds a vertex bone weight. (Oi)
    
    immBoneWeightus(...)
        feeds a vertex bone weight. (Oi)
    
    immColor3(...)
        feeds a vertex color. (O)
    
    immColor3f(...)
        feeds a vertex color. (O)
    
    immColor3hf(...)
        feeds a vertex color. (O)
    
    immColor3s(...)
        feeds a vertex color. (O)
    
    immColor3us(...)
        feeds a vertex color. (O)
    
    immColor4(...)
        feeds a vertex color. (O)
    
    immColor4f(...)
        feeds a vertex color. (O)
    
    immColor4hf(...)
        feeds a vertex color. (O)
    
    immColor4s(...)
        feeds a vertex color. (O)
    
    immColor4us(...)
        feeds a vertex color. (O)
    
    immColorX(...)
        feeds a vertex color. (Oii)
    
    immEnd(...)
        end immediate-mode drawing.
    
    immLMUV2(...)
        feeds a vertex lmuv. (O)
    
    immLMUV2f(...)
        feeds a vertex lmuv. (O)
    
    immLMUV2hf(...)
        feeds a vertex lmuv. (O)
    
    immLMUV2s(...)
        feeds a vertex lmuv. (O)
    
    immLMUV2us(...)
        feeds a vertex lmuv. (O)
    
    immLMUVX(...)
        feeds a vertex lmuv. (Oii)
    
    immNormal3(...)
        feeds a vertex normal. (O)
    
    immNormal3f(...)
        feeds a vertex normal. (O)
    
    immNormal3hf(...)
        feeds a vertex normal. (O)
    
    immNormal3s(...)
        feeds a vertex normal. (O)
    
    immNormal3us(...)
        feeds a vertex normal. (O)
    
    immNormalX(...)
        feeds a vertex normal. (Oii)
    
    immTangent4(...)
        feeds a tangent vector. (O)
    
    immTangent4f(...)
        feeds a tangent vector. (O)
    
    immTangent4hf(...)
        feeds a tangent vector. (O)
    
    immTangent4s(...)
        feeds a tangent vector. (O)
    
    immTangent4us(...)
        feeds a tangent vector. (O)
    
    immTangentX(...)
        feeds a tangent vector. (Oii)
    
    immUV2(...)
        feeds a vertex uv. (O)
    
    immUV2f(...)
        feeds a vertex uv. (O)
    
    immUV2hf(...)
        feeds a vertex uv. (O)
    
    immUV2s(...)
        feeds a vertex uv. (O)
    
    immUV2us(...)
        feeds a vertex uv. (O)
    
    immUVX(...)
        feeds a vertex uv. (Oii)
    
    immUserData(...)
        feeds vertex user data. (sO|i)
    
    immVertMorphIndex(...)
        feeds a vertex morph index. (i)
    
    immVertex3(...)
        feeds a vertex position. (must be called last for each primitive) (O)
    
    immVertex3f(...)
        feeds a vertex position. (must be called last for each primitive) (O)
    
    immVertex3hf(...)
        feeds a vertex position. (must be called last for each primitive) (O)
    
    immVertex3s(...)
        feeds a vertex position. (must be called last for each primitive) (O)
    
    immVertex3us(...)
        feeds a vertex position. (must be called last for each primitive) (O)
    
    immVertexX(...)
        feeds a vertex position. (must be called last for each primitive) (Oii)
    
    isGeometryTarget(...)
        returns 1 if the active format is a geometry target, otherwise 0.
    
    lastCheckedPartialChecksum(...)
        returns crc32 for a region of the last checked file, caching the result. returns None if operation fails. (ii)
    
    loadExternalTex(...)
        returns a NoeTexture, or None if the texture could not be found. (s)
    
    loadFileOnTexturePaths(...)
        checks all texture paths for files, and returns None or bytearray of loaded data. (s)
    
    loadIntoByteArray(...)
        returns PyByteArray with file. (u)
    
    loadMdlTextures(...)
        returns a tuple of NoeTextures, where all textures have already been converted to raw RGBA32. Sets the texRefIndex member of every NoeMesh in the model to the index of its texture in the returned tuple. (O)
    
    loadPairedFile(...)
        returns PyByteArray with file. (ss)
    
    loadPairedFileGetPath(...)
        same as loadPairedFile, but returns None on cancel/fail instead of raising an exception, and returns a tuple of (data, loadPath). (ss)
    
    loadPairedFileOptional(...)
        same as loadPairedFile, but returns None on cancel/fail instead of raising an exception. (ss)
    
    loadTexByHandler(...)
        returns a NoeTexture, or None if the texture could not be found. (Os|i)
    
    mergeKeyFramedFloats(...)
        returns a list of keyframes with n-element values given a list of keyframe floats, using linear interpolation to match keyframe times. (O)
    
    multiplyBones(...)
        returns a list of NoeBones multiplied according to hierarchy. (O)
    
    mw_tw_dmagfxcopy(...)
        does t/w-unit copy into canvas. (OiiiiOOiiii)
    
    noesisIsExporting(...)
        returns non-0 if the handler is invoked for an export target instead of a preview or instanced module data load.
    
    parseInstanceOptions(...)
        parses option string in the active rapi instance. (s)
    
    processCommands(...)
        processes given commands in the active rapi module. (s)
    
    rpgBindBoneIndexBuffer(...)
        binds bone index buffer. (Oiii)
    
    rpgBindBoneIndexBufferOfs(...)
        binds bone index buffer. (Oiiii)
    
    rpgBindBoneWeightBuffer(...)
        binds bone weight buffer. (Oiii)
    
    rpgBindBoneWeightBufferOfs(...)
        binds bone weight buffer. (Oiiii)
    
    rpgBindColorBuffer(...)
        binds color buffer. (Oiii)
    
    rpgBindColorBufferOfs(...)
        binds color buffer. (Oiiii)
    
    rpgBindNormalBuffer(...)
        binds normal buffer. (Oii)
    
    rpgBindNormalBufferOfs(...)
        binds normal buffer. (Oiii)
    
    rpgBindPositionBuffer(...)
        binds position buffer. (Oii)
    
    rpgBindPositionBufferOfs(...)
        binds position buffer. (Oiii)
    
    rpgBindTangentBuffer(...)
        binds tangent buffer. (Oii)
    
    rpgBindTangentBufferOfs(...)
        binds tangent buffer. (Oiii)
    
    rpgBindUV1Buffer(...)
        binds uv1 buffer. (Oii)
    
    rpgBindUV1BufferOfs(...)
        binds uv1 buffer. (Oiii)
    
    rpgBindUV2Buffer(...)
        binds uv2 buffer. (Oii)
    
    rpgBindUV2BufferOfs(...)
        binds uv2 buffer. (Oiii)
    
    rpgBindUVXBuffer(...)
        binds uvx buffer. (Oiiii)
    
    rpgBindUVXBufferOfs(...)
        binds uvx buffer. (Oiiiii)
    
    rpgBindUserDataBuffer(...)
        binds user data buffer. (sOii|i)
    
    rpgClearBufferBinds(...)
        clears all bound buffers.
    
    rpgClearMaterials(...)
        clears all internal materials.
    
    rpgClearMorphs(...)
        clears all internal morph buffers.
    
    rpgClearNames(...)
        clears all internal names.
    
    rpgCommitMorphFrame(...)
        commits a frame of bound vertex morph data. (i)
    
    rpgCommitMorphFrameSet(...)
        commits all frames of bound vertex morph data.
    
    rpgCommitTriangles(...)
        commit triangle buffer as bytes. (Oiii|i)
    
    rpgConstructModel(...)
        returns a NoeModel constructed from the rpgeo.
    
    rpgConstructModelAndSort(...)
        returns a NoeModel constructed from the rpgeo.
    
    rpgConstructModelAndSortSlim(...)
        same as rpgConstructModelAndSort but omits various data types.
    
    rpgConstructModelSlim(...)
        same as rpgConstructModel but omits various data types.
    
    rpgCreateContext(...)
        returns rpgeo context handle.
    
    rpgCreatePlaneSpaceUVs(...)
        generates plane-space uv's.
    
    rpgFeedMorphTargetNormals(...)
        feed vmorph normal buffer. (Oii)
    
    rpgFeedMorphTargetNormalsOfs(...)
        feed vmorph normal buffer. (Oiii)
    
    rpgFeedMorphTargetPositions(...)
        feed vmorph position buffer. (Oii)
    
    rpgFeedMorphTargetPositionsOfs(...)
        feed vmorph position buffer. (Oiii)
    
    rpgFlatNormals(...)
        generates flat normals.
    
    rpgGetMorphBase(...)
        returns current morph frame base index.
    
    rpgGetOption(...)
        returns 1 if option is enabled, otherwise 0. (i)
    
    rpgGetStripEnder(...)
        returns the strip-reset value.
    
    rpgGetTriangleCount(...)
        returns number of triangles for current rpgeo context.
    
    rpgGetVertexCount(...)
        returns number of vertices for current rpgeo context.
    
    rpgOptimize(...)
        optimizes lists to remove duplicate vertices, sorts triangles by material, etc.
    
    rpgReset(...)
        resets the active context.
    
    rpgSetActiveContext(...)
        sets the active context. (O)
    
    rpgSetBoneMap(...)
        provides an index map for vertex weight references to bone indices. (O)
    
    rpgSetEndian(...)
        sets endian mode for reading raw buffers. (i)
    
    rpgSetLightmap(...)
        sets the lightmap/secondpass material name. (s)
    
    rpgSetMaterial(...)
        sets the material name. (s)
    
    rpgSetMorphBase(...)
        sets current morph frame base index. (i)
    
    rpgSetName(...)
        sets the mesh name. (s)
    
    rpgSetOption(...)
        sets rpgeo option. (ii)
    
    rpgSetPosScaleBias(...)
        sets geometry scale and bias - pass None, None to disable. (OO)
    
    rpgSetStripEnder(...)
        sets the strip-reset value. (i)
    
    rpgSetTransform(...)
        sets geometry transform matrix. pass None to disable. (O)
    
    rpgSetTriWinding(...)
        sets triangle winding mode. (i)
    
    rpgSetUVScaleBias(...)
        sets uv coordinate scale and bias - pass None, None to disable. (OO|i)
    
    rpgSkinPreconstructedVertsToBones(...)
        skins all relevant committed (via immEnd/rpgCommitTriangles) vertex components using the provided bone list. must be performed prior to rpgConstructModel. (O|ii)
    
    rpgSmoothNormals(...)
        generates smoothed normals.
    
    rpgSmoothTangents(...)
        generates smoothed tangents.
    
    rpgUnifyBinormals(...)
        unifies tangent binormals. (i)
    
    scaleAndBiasPackedFloats(...)
        returns s&b on bytearray of packed floats, with optional clamping. (Off|ff)
    
    setDeferredAnims(...)
        sets deferred anim data for a list of NoeAnim objects.
    
    setInternalViewData(...)
        sets internal view data from a buffer, returns true if successful. see pluginshare.h for more info. (O)
    
    setPreviewOption(...)
        sets various preview options. (ss)
    
    simulateDragAndDrop(...)
        simulates drag and drop using specified file. (s)
    
    splineToMeshBuffers(...)
        returns a tuple of vertex and index data bytearrays. (OOiffi)
    
    swapEndianArray(...)
        returns the entire array endian-swapped at x bytes. (Oi|ii)
    
    tangentMatricesToTan4(...)
        returns a bytearray of tan4 as float*4*vertcount. (iOiiOiiOii)
    
    toolExportGData(...)
        exports loaded gdata to given file. returns true on success. (ss)
    
    toolFreeGData(...)
        frees global data, must be used after toolLoadGData.
    
    toolGetLoadedModel(...)
        returns NoeModel from gdata (i).
    
    toolGetLoadedModelCount(...)
        returns number of loaded models in gdata.
    
    toolLoadGData(...)
        sets the module into global data mode and loads a file. this should only be invoked by tools, do not invoke it in format handlers or you will probably crash noesis. returns True on success. (s)
    
    toolSetGData(...)
        same as toolLoadGData, but allows you to set the gdata from a model list. (O)
    
    toolSetSelectedModelIndex(...)
        sets selected model index in gdata (i).
    
    unpackPS2VIF(...)
        returns a tuple of NoePS2VIFUnpacks (O)
    
    writePCMWaveFile(...)
        writes pcm wave file with provided data. (uOiii)

FILE
    (built-in)
